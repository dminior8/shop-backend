services:
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_DB: shop
      POSTGRES_USER: shopuser
      POSTGRES_PASSWORD: shoppass
    ports:
      - "5432:5432"
    volumes:
      - ./schema/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U shopuser -d shop" ]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      postgres:
        condition: service_healthy

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    command:
      ["redis-server", "--notify-keyspace-events", "Ex"] #2 - włącza publikację powiadomień o zdarzeniach, np. Ex - wygaśniećie kluczy
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    ports:
      - "5540:5540"
    volumes:
      - redis_insight_data:/data
    depends_on:
      redis:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # RabbitMQ default port
      - "15672:15672" # RabbitMQ management plugin (web UI)
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

#  product-service:
#    build:
#      context: .
#      dockerfile: product-service/Dockerfile
#    container_name: product-service
#    ports:
#      - "8082:8082"
#    depends_on:
#      - postgres
#    environment:
#      SPRING_PROFILES_ACTIVE: docker

  cart-service:
    build:
      context: .
      dockerfile: cart-service/Dockerfile
    container_name: cart-service
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
#      - product-service
    environment:
      SPRING_PROFILES_ACTIVE: docker

#  order-service:
#    build:
#      context: .
#      dockerfile: order-service/Dockerfile
#    container_name: order-service
#    ports:
#      - "8083:8083"
#    depends_on:
#      - rabbitmq
#    environment:
#      SPRING_PROFILES_ACTIVE: docker


volumes:
  postgres-data:
  redis_insight_data:

